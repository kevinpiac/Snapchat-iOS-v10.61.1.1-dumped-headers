//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "SCLensCompoundLogger-Protocol.h"

@class NSMutableDictionary, NSString, SCLens, SCLensAnalyticsDataStore, SCLensFpsLogger, SCLensInitLogger, SCLensReadyLogger, SCLensSession, SCLensThumbnailLogger, SCLogger, SCUnlockableLensTracker, SCUserSession;
@protocol SCLensPerformanceAutomationLogger, SCLensUsageTrackerProtocol;

@interface SCLensLogger : NSObject <SCLensCompoundLogger>
{
    SCLogger *_generalPurposeLogger;
    SCLensSession *_lensSession;
    id <SCLensUsageTrackerProtocol> _lensUsageTracker;
    SCUserSession *_userSession;
    _Bool _isCapturing;
    _Bool _isInSnappableViewSession;
    _Bool _snappableFunnelOwnedByInterstitial;
    unsigned long long _lensSessionState;
    id <SCLensPerformanceAutomationLogger> _performanceAutomationLogger;
    _Bool _frontCameraActive;
    _Bool _isRedirectToStore;
    _Bool _isRedirectToWebview;
    _Bool _withAttachmentOpen;
    SCLensReadyLogger *_lensReadyLogger;
    long long _snapSource;
    SCLensAnalyticsDataStore *_lensAnalyticsDataStore;
    SCLensFpsLogger *_lensFpsLogger;
    SCLensInitLogger *_lensInitLogger;
    SCLensThumbnailLogger *_lensThumbnailLogger;
    NSString *_topSnapAdId;
    NSString *_topSnapAdRequestId;
    NSString *_sceneIntRequestId;
    NSString *_sceneIntResumedRequestId;
    NSString *_lensSessionId;
    double _startViewingTime;
    double _cameraStartViewingTime;
    double _startRecordingTime;
    double _endRecordingTime;
    double _spinStartTime;
    SCLens *_currentViewingLens;
    SCLens *_currentSpinningLens;
    unsigned long long _lensCount;
    long long _currentLensIndex;
    NSString *_snappableSessionId;
    NSString *_snappableFunnelId;
    unsigned long long _snappableDepth;
    double _startViewingTimeLensOption;
    unsigned long long _lensOptionCount;
    long long _currentLensOptionIndex;
    NSString *_currentLensOptionId;
    long long _lensOptionSwipeCount;
    NSMutableDictionary *_triggerFiredForCurrentLens;
    unsigned long long _frontCameraMaxFacesCount;
    unsigned long long _backCameraMaxFacesCount;
    unsigned long long _frontCameraSnapFacesCount;
    unsigned long long _backCameraSnapFacesCount;
    double _firstFaceRenderTimestampSec;
    double _firstTriggerTimestampSec;
}

+ (void)logAssetConsumption:(id)arg1;
+ (void)logLensConsumption:(id)arg1;
- (void).cxx_destruct;
- (long long)_currentCameraType;
- (id)_fillLensSwipeEvent:(id)arg1 lensSourceType:(long long)arg2 lens:(id)arg3 lensSwipeOptionCount:(long long)arg4 isGeoEvent:(_Bool)arg5 indexPos:(long long)arg6 snapSource:(long long)arg7;
- (long long)_getLensAttachmentType:(id)arg1;
- (void)_logCameraFlipEvent:(long long)arg1 isRecording:(_Bool)arg2 action:(long long)arg3 sourceType:(long long)arg4;
- (void)_logPerformanceAutomationEvent:(id)arg1;
@property(nonatomic) unsigned long long backCameraMaxFacesCount; // @synthesize backCameraMaxFacesCount=_backCameraMaxFacesCount;
@property(nonatomic) unsigned long long backCameraSnapFacesCount; // @synthesize backCameraSnapFacesCount=_backCameraSnapFacesCount;
@property(nonatomic) double cameraStartViewingTime; // @synthesize cameraStartViewingTime=_cameraStartViewingTime;
- (void)cameraToggledWithAction:(long long)arg1 recording:(_Bool)arg2;
- (void)closeAttachmentView;
@property(nonatomic) long long currentLensIndex; // @synthesize currentLensIndex=_currentLensIndex;
@property(copy, nonatomic) NSString *currentLensOptionId; // @synthesize currentLensOptionId=_currentLensOptionId;
@property(nonatomic) long long currentLensOptionIndex; // @synthesize currentLensOptionIndex=_currentLensOptionIndex;
@property(retain, nonatomic) SCLens *currentSpinningLens; // @synthesize currentSpinningLens=_currentSpinningLens;
@property(retain, nonatomic) SCLens *currentViewingLens; // @synthesize currentViewingLens=_currentViewingLens;
@property(nonatomic) double endRecordingTime; // @synthesize endRecordingTime=_endRecordingTime;
- (void)enterSnappableSession;
- (void)faceCountChanged:(unsigned long long)arg1;
@property(nonatomic) double firstFaceRenderTimestampSec; // @synthesize firstFaceRenderTimestampSec=_firstFaceRenderTimestampSec;
@property(nonatomic) double firstTriggerTimestampSec; // @synthesize firstTriggerTimestampSec=_firstTriggerTimestampSec;
@property(nonatomic) _Bool frontCameraActive; // @synthesize frontCameraActive=_frontCameraActive;
@property(nonatomic) unsigned long long frontCameraMaxFacesCount; // @synthesize frontCameraMaxFacesCount=_frontCameraMaxFacesCount;
@property(nonatomic) unsigned long long frontCameraSnapFacesCount; // @synthesize frontCameraSnapFacesCount=_frontCameraSnapFacesCount;
- (id)initWithGeneralPurposeLogger:(id)arg1 lensUsageTracker:(id)arg2 lensAnalyticsDataStore:(id)arg3 userSession:(id)arg4 performanceAutomationLogger:(id)arg5;
@property(readonly, nonatomic) _Bool isLensSessionPaused;
@property(nonatomic) _Bool isRedirectToStore; // @synthesize isRedirectToStore=_isRedirectToStore;
@property(nonatomic) _Bool isRedirectToWebview; // @synthesize isRedirectToWebview=_isRedirectToWebview;
- (void)leaveSnappableSession;
@property(readonly, nonatomic) SCLensAnalyticsDataStore *lensAnalyticsDataStore; // @synthesize lensAnalyticsDataStore=_lensAnalyticsDataStore;
@property(nonatomic) unsigned long long lensCount; // @synthesize lensCount=_lensCount;
@property(retain, nonatomic) SCLensFpsLogger *lensFpsLogger; // @synthesize lensFpsLogger=_lensFpsLogger;
@property(readonly, nonatomic) SCLensInitLogger *lensInitLogger; // @synthesize lensInitLogger=_lensInitLogger;
@property(nonatomic) unsigned long long lensOptionCount; // @synthesize lensOptionCount=_lensOptionCount;
- (void)lensOptionPresentedAtIndex:(long long)arg1 lensOptionId:(id)arg2 lensOptionCount:(unsigned long long)arg3;
- (void)lensOptionSessionStopped;
@property(nonatomic) long long lensOptionSwipeCount; // @synthesize lensOptionSwipeCount=_lensOptionSwipeCount;
- (void)lensPresented:(id)arg1 atIndex:(unsigned long long)arg2 originalLensIndex:(unsigned long long)arg3 count:(unsigned long long)arg4 afterRecording:(_Bool)arg5 launchData:(id)arg6;
@property(readonly, nonatomic) SCLensReadyLogger *lensReadyLogger; // @synthesize lensReadyLogger=_lensReadyLogger;
@property(copy, nonatomic) NSString *lensSessionId; // @synthesize lensSessionId=_lensSessionId;
- (void)lensSessionPaused:(id)arg1;
- (void)lensSessionResumed:(id)arg1;
- (id)lensSessionStartedForSourceType:(long long)arg1;
- (id)lensSessionStartedWithSessionId:(id)arg1 sourceType:(long long)arg2;
- (void)lensSessionStopped:(id)arg1;
@property(readonly, nonatomic) long long lensSource;
- (void)lensSpinning:(id)arg1 atIndex:(unsigned long long)arg2 originalLensIndex:(unsigned long long)arg3 count:(unsigned long long)arg4;
@property(readonly, nonatomic) SCLensThumbnailLogger *lensThumbnailLogger; // @synthesize lensThumbnailLogger=_lensThumbnailLogger;
- (void)logCustomLensEventsForLens:(id)arg1 sessionId:(id)arg2 eventsArray:(id)arg3;
- (void)logLensSwipeEvent:(long long)arg1 afterRecording:(_Bool)arg2;
- (void)openAttachmentView;
- (void)recordingStarted;
- (void)recordingStopped;
- (void)resetCurrentViewingLensIfPossibleAfterRecording:(_Bool)arg1;
- (void)resetPresentedLensAfterRecording:(_Bool)arg1;
@property(retain, nonatomic) NSString *sceneIntRequestId; // @synthesize sceneIntRequestId=_sceneIntRequestId;
@property(readonly, nonatomic) NSString *sceneIntResumedRequestId; // @synthesize sceneIntResumedRequestId=_sceneIntResumedRequestId;
@property(nonatomic) long long snapSource; // @synthesize snapSource=_snapSource;
@property(nonatomic) unsigned long long snappableDepth; // @synthesize snappableDepth=_snappableDepth;
@property(retain, nonatomic) NSString *snappableFunnelId; // @synthesize snappableFunnelId=_snappableFunnelId;
@property(retain, nonatomic) NSString *snappableSessionId; // @synthesize snappableSessionId=_snappableSessionId;
- (void)setSnappablesFunnelIdFromInsterstitial:(id)arg1;
@property(nonatomic) double spinStartTime; // @synthesize spinStartTime=_spinStartTime;
@property(nonatomic) double startRecordingTime; // @synthesize startRecordingTime=_startRecordingTime;
@property(nonatomic) double startViewingTime; // @synthesize startViewingTime=_startViewingTime;
@property(nonatomic) double startViewingTimeLensOption; // @synthesize startViewingTimeLensOption=_startViewingTimeLensOption;
@property(retain, nonatomic) NSString *topSnapAdId; // @synthesize topSnapAdId=_topSnapAdId;
@property(retain, nonatomic) NSString *topSnapAdRequestId; // @synthesize topSnapAdRequestId=_topSnapAdRequestId;
@property(retain, nonatomic) NSMutableDictionary *triggerFiredForCurrentLens; // @synthesize triggerFiredForCurrentLens=_triggerFiredForCurrentLens;
@property(nonatomic) _Bool withAttachmentOpen; // @synthesize withAttachmentOpen=_withAttachmentOpen;
@property(readonly, nonatomic) NSString *snappabbleFunnelAndDepthString;
- (void)trackLensInteraction:(id)arg1 appliedLensId:(id)arg2 beforeSnap:(_Bool)arg3;
- (void)triggerFired:(id)arg1;
@property(readonly, nonatomic) SCUnlockableLensTracker *unlockableLensTracker;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

