//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "SCFeature.h"

#import "SCFeatureSpectaclesLensFilterInPreview-Protocol.h"
#import "SCLensDataFetcherListener-Protocol.h"
#import "SCLensDataProviderListener-Protocol.h"

@class NSArray, NSString, SCFeatureReference, SCLens, SCLensInPreviewUsageNotifier, SCLensUIUpdateListenerAnnouncer, SCPreviewConfiguration, SCPromise, SCSmartCarouselFilterArranger;
@protocol SCFeatureSpectaclesLensFilterInPreviewDelegate, SCLensCameraScreenDataProviderProtocol, SCLensDataFetcher><SCLensUIUpdateListener, SCPreviewLensDataProviderFactoryProtocol;

@interface SCFeatureSpectaclesLensFilterInPreviewImpl : SCFeature <SCLensDataProviderListener, SCLensDataFetcherListener, SCFeatureSpectaclesLensFilterInPreview>
{
    SCPromise *_lensDataProviderPromise;
    id <SCPreviewLensDataProviderFactoryProtocol> _lensDataProviderFactory;
    id <SCLensDataFetcher><SCLensUIUpdateListener> _lensDataFetcher;
    SCLensUIUpdateListenerAnnouncer *_uiUpdateAnnouncer;
    SCFeatureReference *_swipeFilters;
    SCSmartCarouselFilterArranger *_filterArranger;
    _Bool _isTransitioning;
    _Bool _didFinishProcessingFrameForAppliedLens;
    id <SCFeatureSpectaclesLensFilterInPreviewDelegate> _delegate;
    SCLens *_appliedLens;
    SCPreviewConfiguration *_configuration;
    id <SCLensCameraScreenDataProviderProtocol> _lensDataProvider;
    SCLensInPreviewUsageNotifier *_lensUsageNotifier;
    NSArray *_lenses;
    NSString *_lensDataProviderToken;
}

- (void).cxx_destruct;
- (id)_currentFilterView;
- (_Bool)_shouldIncludeLensesInFilterCarousel;
- (void)_updateLens:(id)arg1;
- (void)activate;
@property(readonly, nonatomic) SCLens *appliedLens; // @synthesize appliedLens=_appliedLens;
- (void)applyLensIfNeeded;
@property(nonatomic) __weak SCPreviewConfiguration *configuration; // @synthesize configuration=_configuration;
- (void)configureWithView:(id)arg1;
@property(nonatomic) __weak id <SCFeatureSpectaclesLensFilterInPreviewDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) _Bool didFinishProcessingFrameForAppliedLens; // @synthesize didFinishProcessingFrameForAppliedLens=_didFinishProcessingFrameForAppliedLens;
- (void)imageProcessLensCommand:(id)arg1 didFinishProcessingFrameWithLens:(id)arg2;
- (void)imageProcessLensCommand:(id)arg1 didRecognizeExpression:(id)arg2;
- (void)imageProcessLensCommand:(id)arg1 didRecognizeFaces:(unsigned long long)arg2;
- (void)imageProcessLensCommand:(id)arg1 didUnloadWithLensComponentManager:(id)arg2;
- (void)imageProcessLensCommand:(id)arg1 willLoadWithLensComponentManager:(id)arg2;
- (id)initWithPreviewConfiguration:(id)arg1 lensUsageNotifier:(id)arg2 lensDataProviderFactory:(id)arg3 lensDataFetcher:(id)arg4 swipeFilters:(id)arg5 filterArranger:(id)arg6;
@property(nonatomic) _Bool isTransitioning; // @synthesize isTransitioning=_isTransitioning;
- (void)lensDataFetcher:(id)arg1 didFinishLoadingContentForAsset:(id)arg2 content:(id)arg3 error:(id)arg4;
- (void)lensDataFetcher:(id)arg1 didFinishLoadingContentForLens:(id)arg2 contentPath:(id)arg3 error:(id)arg4;
- (void)lensDataFetcher:(id)arg1 didFinishLoadingFilterOverlayImageForLens:(id)arg2 imagePath:(id)arg3 error:(id)arg4;
- (void)lensDataFetcher:(id)arg1 didFinishLoadingImageForLens:(id)arg2 image:(id)arg3 error:(id)arg4;
- (void)lensDataFetcher:(id)arg1 willStartLoadingAsset:(id)arg2;
- (void)lensDataFetcher:(id)arg1 willStartLoadingContentForLens:(id)arg2;
- (void)lensDataFetcher:(id)arg1 willStartLoadingFilterOverlayImagePathForLens:(id)arg2;
- (void)lensDataFetcher:(id)arg1 willStartLoadingImageForLens:(id)arg2;
@property(nonatomic) __weak id <SCLensCameraScreenDataProviderProtocol> lensDataProvider; // @synthesize lensDataProvider=_lensDataProvider;
- (void)lensDataProvider:(id)arg1 didUpdateAllLenses:(id)arg2 requiresAnimation:(_Bool)arg3;
- (void)lensDataProvider:(id)arg1 didUpdateLens:(id)arg2 contentUpdateType:(long long)arg3;
@property(retain, nonatomic) NSString *lensDataProviderToken; // @synthesize lensDataProviderToken=_lensDataProviderToken;
@property(retain, nonatomic) SCLensInPreviewUsageNotifier *lensUsageNotifier; // @synthesize lensUsageNotifier=_lensUsageNotifier;
@property(retain, nonatomic) NSArray *lenses; // @synthesize lenses=_lenses;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

