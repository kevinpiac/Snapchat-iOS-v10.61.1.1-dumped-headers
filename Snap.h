//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "EphemeralMedia.h"

#import "MediaDataSource-Protocol.h"
#import "MediaDelegate-Protocol.h"
#import "MediaImageProcessingDelegate-Protocol.h"
#import "MediaUploadDelegate-Protocol.h"
#import "NSCoding-Protocol.h"
#import "SCReplyChatMessage-Protocol.h"
#import "SnapVideoFilterDelegate-Protocol.h"

@class AVPlayerItem, NSArray, NSDate, NSDictionary, NSNumber, NSString, NSURL, SCSnapVideoFilterState, SOJUMediaUrl, SOJUSecurityFideliusFriendsKeysResponse;

@interface Snap : EphemeralMedia <SnapVideoFilterDelegate, MediaDataSource, MediaDelegate, MediaUploadDelegate, MediaImageProcessingDelegate, NSCoding, SCReplyChatMessage>
{
    _Bool _clearedBySender;
    _Bool _clearedByRecipient;
    _Bool _pending;
    _Bool _recentlyViewedAndHasNotLeftView;
    _Bool _replayed;
    _Bool _expiredWhileStackNotEmpty;
    _Bool _isInitialView;
    _Bool _hasBeenPaidToReplay;
    _Bool _isLastViewedSnapInStack;
    _Bool _isViewedFully;
    _Bool _hideBroadcastTimer;
    _Bool _broadcastSnap;
    _Bool _fideliusIsRetried;
    _Bool _markedAsFailedToView;
    _Bool _isRewrapInClear;
    _Bool _didFallback;
    _Bool _shouldRetryMediaSendTask;
    _Bool _disableAutoRetry;
    _Bool _isGroupSnap;
    double _closedAt;
    NSString *_display;
    NSString *_sender;
    NSString *_recipient;
    NSString *_correspondentId;
    NSArray *_usernameRecipients;
    NSArray *_phoneNumberInvitedRecipients;
    long long _replayAnimationStateFeed;
    long long _replayAnimationStateChat;
    long long _screenshots;
    long long _screenRecordings;
    NSDate *_sentTimestamp;
    long long _status;
    long long _state;
    NSDate *_timestamp;
    NSDate *_snapStreakExpiryTime;
    NSNumber *_snapStreakCount;
    NSArray *_replyMedias;
    NSDate *_sendStartTimestamp;
    NSString *_key;
    NSString *_iv;
    long long _skipMediaPreloadReason;
    NSString *_encryptedSnapId;
    NSDate *_finishViewingTimestamp;
    long long _viewSource;
    AVPlayerItem *_playerItem;
    double _secondsViewed;
    double _timeStartedOnScreen;
    NSNumber *_time_left;
    NSString *_broadcastActionText;
    NSString *_broadcastSecondaryText;
    NSURL *_broadcastUrlToOpen;
    NSURL *_broadcastMediaUrl;
    NSString *_stackId;
    NSDictionary *_inviteSnapMetadata;
    long long _fideliusVersion;
    NSString *_senderOutBeta;
    NSString *_fideliusSnapKey;
    NSString *_fideliusSnapIv;
    NSString *_fideliusUnwrappedKey;
    NSDictionary *_fideliusInfo;
    long long _fideliusFailureCounter;
    long long _failedToPlayCount;
    long long _rewrapCount;
    double _rewrapStartTime;
    SOJUSecurityFideliusFriendsKeysResponse *_rewrapFriendKeys;
    NSString *_mediaSendTaskId;
    SOJUMediaUrl *_directDownloadMediaUrl;
    SCSnapVideoFilterState *_snapVideoFilterState;
    NSNumber *_savedSnapStateNumber;
    unsigned long long _numTimesReloaded;
    unsigned long long _numAutomaticRetries;
    unsigned long long _numTimesCanBeReplayed;
}

+ (unsigned long long *)fasterCodingKeys;
+ (unsigned long long)fasterCodingVersion;
+ (_Bool)isStateReceivedAndOpened:(long long)arg1;
+ (_Bool)isStateSendingOrHasFailed:(long long)arg1;
+ (id)snapFromEphemeralMedia:(id)arg1;
+ (id)stringForSnapState:(long long)arg1;
+ (id)stringForSnapStatus:(long long)arg1;
+ (id)targetSnapFromEphemeralMedia:(id)arg1;
+ (id)videoDirectory;
- (void).cxx_destruct;
- (void)_addBannerVideoToFrontOfVideo:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)_addMetadataToImage:(id)arg1 isVideo:(_Bool)arg2;
- (id)_addOffsetToImageData:(id)arg1;
- (void)_addReplyMediasToJSONDictionary:(id)arg1;
- (id)_addUsernameBanner:(id)arg1;
- (id)_allRecipientUsernames;
- (void)_compositeVideos:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_createFirstFrameImageVideo:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)_fideliusUnwrapInput;
- (id)_fideliusWrapInput;
- (void)_removePersistedFailedSnapData;
- (void)_retrySendingSnap;
- (void)_sendSnap;
- (id)_sentSnapParametersWithResponse:(id)arg1;
- (void)_snapDidDecodeObject;
- (id)_snapType;
- (void)_snapWillEncodeObject;
- (_Bool)autoRetrySendingIfNetworkReachable;
@property(retain, nonatomic) NSString *broadcastActionText; // @synthesize broadcastActionText=_broadcastActionText;
@property(retain, nonatomic) NSURL *broadcastMediaUrl; // @synthesize broadcastMediaUrl=_broadcastMediaUrl;
@property(retain, nonatomic) NSString *broadcastSecondaryText; // @synthesize broadcastSecondaryText=_broadcastSecondaryText;
@property(nonatomic) _Bool broadcastSnap; // @synthesize broadcastSnap=_broadcastSnap;
@property(retain, nonatomic) NSURL *broadcastUrlToOpen; // @synthesize broadcastUrlToOpen=_broadcastUrlToOpen;
- (_Bool)canBeReplayed;
- (_Bool)canBeSaved;
- (_Bool)canDelete;
- (id)cleanId;
- (void)clearNumTimesReloaded;
@property(nonatomic) _Bool clearedByRecipient; // @synthesize clearedByRecipient=_clearedByRecipient;
@property(nonatomic) _Bool clearedBySender; // @synthesize clearedBySender=_clearedBySender;
- (id)clearedDictionary;
@property(nonatomic) double closedAt; // @synthesize closedAt=_closedAt;
- (id)consistentId;
- (id)conversationId;
@property(retain, nonatomic) NSString *correspondentId; // @synthesize correspondentId=_correspondentId;
- (void)decodeWithFasterDecoder:(id)arg1;
- (id)decryptData:(id)arg1 forMedia:(id)arg2;
- (id)delimitedRecipientUsernamesWithDelimiter:(id)arg1;
@property(readonly, copy) NSString *description;
- (void)didDecodeObject;
@property(nonatomic) _Bool didFallback; // @synthesize didFallback=_didFallback;
- (void)didReplay;
@property(retain, nonatomic) SOJUMediaUrl *directDownloadMediaUrl; // @synthesize directDownloadMediaUrl=_directDownloadMediaUrl;
@property(nonatomic) _Bool disableAutoRetry; // @synthesize disableAutoRetry=_disableAutoRetry;
@property(retain, nonatomic) NSString *display; // @synthesize display=_display;
- (void)doSend;
- (void)encodeWithCoder:(id)arg1;
- (void)encodeWithFasterCoder:(id)arg1;
- (_Bool)encrypt;
- (id)encryptedMediaDataToUpload:(id)arg1;
@property(copy, nonatomic) NSString *encryptedSnapId; // @synthesize encryptedSnapId=_encryptedSnapId;
- (id)encryptionDictionaryForMedia:(id)arg1;
- (id)endpointForMedia:(id)arg1;
@property(nonatomic) _Bool expiredWhileStackNotEmpty; // @synthesize expiredWhileStackNotEmpty=_expiredWhileStackNotEmpty;
- (id)failedMediaDatastore;
@property(nonatomic) long long failedToPlayCount; // @synthesize failedToPlayCount=_failedToPlayCount;
- (_Bool)failedToSend;
- (void)fetchMediaDidFailForMedia:(id)arg1 error:(id)arg2;
- (void)fetchMediaDidSucceedForMedia:(id)arg1;
- (void)fetchMediaIsGoneForMedia:(id)arg1;
- (void)fetchMediaIsLoadingForMedia:(id)arg1;
@property(nonatomic) long long fideliusFailureCounter; // @synthesize fideliusFailureCounter=_fideliusFailureCounter;
@property(retain, nonatomic) NSDictionary *fideliusInfo; // @synthesize fideliusInfo=_fideliusInfo;
@property(nonatomic) _Bool fideliusIsRetried; // @synthesize fideliusIsRetried=_fideliusIsRetried;
@property(retain, nonatomic) NSString *fideliusSnapIv; // @synthesize fideliusSnapIv=_fideliusSnapIv;
@property(retain, nonatomic) NSString *fideliusSnapKey; // @synthesize fideliusSnapKey=_fideliusSnapKey;
@property(retain, nonatomic) NSString *fideliusUnwrappedKey; // @synthesize fideliusUnwrappedKey=_fideliusUnwrappedKey;
@property(nonatomic) long long fideliusVersion; // @synthesize fideliusVersion=_fideliusVersion;
@property(retain, nonatomic) NSDate *finishViewingTimestamp; // @synthesize finishViewingTimestamp=_finishViewingTimestamp;
- (id)generateOutputMovieURL;
@property(nonatomic) _Bool hasBeenPaidToReplay; // @synthesize hasBeenPaidToReplay=_hasBeenPaidToReplay;
- (_Bool)hasFailed;
- (_Bool)hasFreeReplay;
- (_Bool)hasMediaProcessingFailed;
@property(nonatomic) _Bool hideBroadcastTimer; // @synthesize hideBroadcastTimer=_hideBroadcastTimer;
- (void)imageProcessingDidSucceedForMedia:(id)arg1;
- (void)initFields;
- (id)initWithClientId;
- (id)initWithCoder:(id)arg1;
@property(retain, nonatomic) NSDictionary *inviteSnapMetadata; // @synthesize inviteSnapMetadata=_inviteSnapMetadata;
- (_Bool)isBroadcastForMedia:(id)arg1;
- (_Bool)isForwardable;
@property(nonatomic) _Bool isGroupSnap; // @synthesize isGroupSnap=_isGroupSnap;
@property(nonatomic) _Bool isInitialView; // @synthesize isInitialView=_isInitialView;
- (_Bool)isInvalidAfterUnarchiving;
@property(nonatomic) _Bool isLastViewedSnapInStack; // @synthesize isLastViewedSnapInStack=_isLastViewedSnapInStack;
- (_Bool)isLoaded;
- (_Bool)isLoading;
- (_Bool)isMediaProcessing;
- (_Bool)isMediaProcessingOrFailedToProcess;
- (_Bool)isNotLoaded;
- (_Bool)isReceivedAndOpened;
- (_Bool)isReceivedAndUnopened;
- (_Bool)isReleased;
- (_Bool)isReleasedBy:(id)arg1;
- (_Bool)isReplaying;
@property(nonatomic) _Bool isRewrapInClear; // @synthesize isRewrapInClear=_isRewrapInClear;
- (_Bool)isSaved;
- (_Bool)isSavedByParticipant:(id)arg1;
- (_Bool)isScreenRecorded;
- (_Bool)isScreenshotted;
- (_Bool)isSending;
- (_Bool)isSendingOrHasFailed;
- (_Bool)isSent;
- (_Bool)isSentSnap;
- (_Bool)isSnapOpened;
- (_Bool)isUnreadByRecipients;
- (_Bool)isUploadingOrFailedToUpload;
@property(nonatomic) _Bool isViewedFully; // @synthesize isViewedFully=_isViewedFully;
- (_Bool)isViewing;
- (id)iterToken;
@property(retain, nonatomic) NSString *iv; // @synthesize iv=_iv;
@property(retain, nonatomic) NSString *key; // @synthesize key=_key;
- (id)keyForMedia:(id)arg1;
- (void)loadPersistedFailedSnapData;
- (void)markAsFailedToSendAndExpired;
@property(nonatomic) _Bool markedAsFailedToView; // @synthesize markedAsFailedToView=_markedAsFailedToView;
- (id)mediaIdForMedia:(id)arg1;
@property(copy, nonatomic) NSString *mediaSendTaskId; // @synthesize mediaSendTaskId=_mediaSendTaskId;
- (void)mediaUploadDidFailForMedia:(id)arg1;
- (void)mediaUploadDidSucceedForMedia:(id)arg1;
- (id)messageRecipient;
- (id)messageSender;
- (id)messageTimestamp;
- (id)messageTimestampForOrdering;
- (long long)messageType;
- (_Bool)needsAuthToFetch;
@property(nonatomic) unsigned long long numAutomaticRetries; // @synthesize numAutomaticRetries=_numAutomaticRetries;
@property(nonatomic) unsigned long long numTimesCanBeReplayed; // @synthesize numTimesCanBeReplayed=_numTimesCanBeReplayed;
@property(nonatomic) unsigned long long numTimesReloaded; // @synthesize numTimesReloaded=_numTimesReloaded;
- (id)numericId;
- (void)optionallyEncryptLensMetadata;
@property(nonatomic) _Bool pending; // @synthesize pending=_pending;
- (_Bool)persist;
@property(copy, nonatomic) NSArray *phoneNumberInvitedRecipients; // @synthesize phoneNumberInvitedRecipients=_phoneNumberInvitedRecipients;
@property(retain, nonatomic) AVPlayerItem *playerItem; // @synthesize playerItem=_playerItem;
- (void)postFailToSendNotification;
- (void)postSend;
- (void)preSend;
- (_Bool)preferFasterCoding;
@property(nonatomic) _Bool recentlyViewedAndHasNotLeftView; // @synthesize recentlyViewedAndHasNotLeftView=_recentlyViewedAndHasNotLeftView;
@property(retain, nonatomic) NSString *recipient; // @synthesize recipient=_recipient;
- (id)recipientUsernames;
- (void)replaceWithSnap:(id)arg1;
- (void)replay;
@property(nonatomic) long long replayAnimationStateChat; // @synthesize replayAnimationStateChat=_replayAnimationStateChat;
@property(nonatomic) long long replayAnimationStateFeed; // @synthesize replayAnimationStateFeed=_replayAnimationStateFeed;
@property(nonatomic) _Bool replayed; // @synthesize replayed=_replayed;
@property(retain, nonatomic) NSArray *replyMedias; // @synthesize replyMedias=_replyMedias;
- (id)requestContexts;
- (long long)requestFallbackPriority;
- (long long)requestPriorityUserInitiated:(_Bool)arg1;
- (void)retrySending:(_Bool)arg1;
@property(nonatomic) long long rewrapCount; // @synthesize rewrapCount=_rewrapCount;
@property(retain, nonatomic) SOJUSecurityFideliusFriendsKeysResponse *rewrapFriendKeys; // @synthesize rewrapFriendKeys=_rewrapFriendKeys;
@property(nonatomic) double rewrapStartTime; // @synthesize rewrapStartTime=_rewrapStartTime;
@property(copy, nonatomic) NSNumber *savedSnapStateNumber; // @synthesize savedSnapStateNumber=_savedSnapStateNumber;
@property(nonatomic) long long screenRecordings; // @synthesize screenRecordings=_screenRecordings;
@property(nonatomic) long long screenshots; // @synthesize screenshots=_screenshots;
@property(nonatomic) double secondsViewed; // @synthesize secondsViewed=_secondsViewed;
- (id)secretSentSnapParameters;
- (id)sendJSON;
@property(retain, nonatomic) NSDate *sendStartTimestamp; // @synthesize sendStartTimestamp=_sendStartTimestamp;
- (void)sendWithPreSend:(_Bool)arg1 postSend:(_Bool)arg2;
@property(retain, nonatomic) NSString *sender; // @synthesize sender=_sender;
@property(retain, nonatomic) NSString *senderOutBeta; // @synthesize senderOutBeta=_senderOutBeta;
- (_Bool)sending;
- (_Bool)sentByUser;
@property(retain, nonatomic) NSDate *sentTimestamp; // @synthesize sentTimestamp=_sentTimestamp;
- (id)sequenceNumber;
- (void)setBool:(_Bool)arg1 forUInt64Key:(unsigned long long)arg2;
- (void)setObject:(id)arg1 forUInt64Key:(unsigned long long)arg2;
- (void)setSInt32:(int)arg1 forUInt64Key:(unsigned long long)arg2;
- (void)setSInt64:(long long)arg1 forUInt64Key:(unsigned long long)arg2;
@property(nonatomic) _Bool shouldRetryMediaSendTask; // @synthesize shouldRetryMediaSendTask=_shouldRetryMediaSendTask;
@property(nonatomic) long long skipMediaPreloadReason; // @synthesize skipMediaPreloadReason=_skipMediaPreloadReason;
@property(retain, nonatomic) NSNumber *snapStreakCount; // @synthesize snapStreakCount=_snapStreakCount;
@property(retain, nonatomic) NSDate *snapStreakExpiryTime; // @synthesize snapStreakExpiryTime=_snapStreakExpiryTime;
@property(copy, nonatomic) SCSnapVideoFilterState *snapVideoFilterState; // @synthesize snapVideoFilterState=_snapVideoFilterState;
@property(copy, nonatomic) NSString *stackId; // @synthesize stackId=_stackId;
@property(nonatomic) long long state; // @synthesize state=_state;
@property(nonatomic) long long status; // @synthesize status=_status;
@property(nonatomic) double timeStartedOnScreen; // @synthesize timeStartedOnScreen=_timeStartedOnScreen;
@property(retain, nonatomic) NSNumber *time_left; // @synthesize time_left=_time_left;
@property(retain, nonatomic) NSDate *timestamp; // @synthesize timestamp=_timestamp;
@property(copy, nonatomic) NSArray *usernameRecipients; // @synthesize usernameRecipients=_usernameRecipients;
@property(nonatomic) long long viewSource; // @synthesize viewSource=_viewSource;
- (_Bool)shouldClientDecrypt;
- (_Bool)shouldDisplayBelowFoldInChat;
- (_Bool)shouldEndToEndEncrypt;
- (_Bool)shouldPostFailToSendNotification;
- (id)teamSnapId;
- (unsigned long long)trackingExpirationInDaysForMedia:(id)arg1;
- (id)trackingIdForMedia:(id)arg1;
- (id)trackingMediaTypeForMedia:(id)arg1;
- (id)trackingTypeForMedia:(id)arg1;
- (void)updateStateFromEphemeralMedia:(id)arg1;
- (id)updatedSnapDictionary;
- (void)uploadAndSend;
- (void)uploadCleartextKey;
- (CDUnknownBlockType)uploadFailureBlock;
- (id)uploadMediaIdForMedia:(id)arg1;
- (long long)uploadMediaTypeForMedia:(id)arg1;
- (id)uploadParametersWithData:(_Bool)arg1 unencryptedData:(id)arg2;
- (void)uploadSnap;
- (CDUnknownBlockType)uploadSuccessBlock;
- (id)uploadSuccessUserDefaultsKey;
- (id)username;
- (void)videoProcessingDidFailForSnapVideoFilter:(id)arg1 error:(id)arg2;
- (void)videoProcessingDidSucceedForSnapVideoFilter:(id)arg1 data:(id)arg2;
- (void)willEncodeObject;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

