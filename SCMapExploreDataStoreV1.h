//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "SCLocationSharingPreferencesListener-Protocol.h"
#import "SCMapPeopleFriendsListener-Protocol.h"
#import "SCMapPersonStatusProviding-Protocol.h"
#import "SCMapStatusFetching-Protocol.h"
#import "SCMapStatusMutating-Protocol.h"
#import "SCMapStatusViewedStateFetching-Protocol.h"
#import "SCTraceEnabled-Protocol.h"

@class NSDate, NSDictionary, NSHashTable, NSMutableSet, NSOrderedSet, NSString, SCLocationSharingPreferencesV1, SCMapExploreStatus, SCMapStatusFetchingListenerAnnouncer, SCMapStatusViewedStateListenerAnnouncer, SCMapUserPreferences, SCQueuePerformer;
@protocol SCMapExploreService, SCMapExploreUserInfoProvider, SCMapPeopleFriendsProvider, SCXBitmojiAvatarGeneratorProtocol;

@interface SCMapExploreDataStoreV1 : NSObject <SCLocationSharingPreferencesListener, SCMapPeopleFriendsListener, SCTraceEnabled, SCMapPersonStatusProviding, SCMapStatusFetching, SCMapStatusMutating, SCMapStatusViewedStateFetching>
{
    NSString *_currentUserId;
    SCLocationSharingPreferencesV1 *_locationSharingPreferences;
    id <SCXBitmojiAvatarGeneratorProtocol> _mapBitmojiAvatarGenerator;
    id <SCMapExploreService> _mapExploreService;
    id <SCMapPeopleFriendsProvider> _mapPeopleFriendsProvider;
    SCMapUserPreferences *_mapUserPreferences;
    id <SCMapExploreUserInfoProvider> _userInfoProvider;
    SCQueuePerformer *_performer;
    SCMapStatusFetchingListenerAnnouncer *_statusFetchingListenerAnnouncer;
    SCMapStatusViewedStateListenerAnnouncer *_viewedStateAnnouncer;
    SCMapExploreStatus *_mostRecentlyViewedStatus;
    NSMutableSet *_pendingViewEvents;
    _Bool _hasScheduledPeriodicUpdateForStatuses;
    _Bool _hasScheduledPeriodicUpdateForMyStatuses;
    _Bool _isAppForegrounded;
    NSHashTable *_listenersRequiringPeriodicUpdates;
    _Bool _loadingStatuses;
    _Bool _loadingMyStatuses;
    NSOrderedSet *_statuses;
    NSOrderedSet *_myStatuses;
    NSDictionary *_statusesByUserId;
    NSDictionary *_statusesByStatusId;
    NSDate *_lastSuccessfulStatusesLoadDate;
    NSDate *_lastSuccessfulMyStatusesLoadDate;
}

+ (_Bool)_friendStatus:(id)arg1 hasStoryMoreRecentThanTimestamp:(double)arg2;
+ (_Bool)_isLoadDate:(id)arg1 olderThan:(double)arg2;
+ (id)_viewEventsForStatus:(id)arg1;
- (void).cxx_destruct;
- (void)_checkForInitialApplicationState;
- (void)_clearViewedState;
- (void)_deleteMyStatus:(id)arg1;
- (void)_didDeleteMyStatus:(id)arg1 newMyStatuses:(id)arg2;
- (void)_didFetchMyStatuses:(id)arg1 error:(id)arg2;
- (void)_didFetchStatuses:(id)arg1 error:(id)arg2;
- (_Bool)_hasListenersRequiringPeriodicUpdates;
- (_Bool)_isViewedFriendStatusGroup:(id)arg1;
- (_Bool)_isViewedMapStatus:(id)arg1;
- (_Bool)_isViewedStatusId:(id)arg1 timestamp:(double)arg2;
- (void)_loadMyStatuses;
- (void)_loadStatuses;
- (void)_markViewedFriendStatusGroup:(id)arg1;
- (void)_markViewedMapStatus:(id)arg1;
- (void)_onApplicationDidBecomeActive:(id)arg1;
- (void)_onApplicationDidEnterBackground:(id)arg1;
- (void)_onApplicationWillEnterForeground:(id)arg1;
- (void)_prefetchStickersForFriendStatusGroup:(id)arg1 dispatchGroup:(id)arg2;
- (id)_repopulatedFriendStatusGroupFromFriendStatusGroup:(id)arg1 peopleProvider:(id)arg2 didChange:(_Bool *)arg3;
- (void)_resetExploreSettingsTooltipState;
- (void)_resetStatusButtonTooltipState;
- (void)_scheduleInitialPeriodicUpdate;
- (void)_schedulePeriodicUpdateForMyStatusesIfNecessaryWithInterval:(double)arg1;
- (void)_schedulePeriodicUpdateForStatusesIfNecessaryWithInterval:(double)arg1;
- (void)_setIsAppForegrounded:(_Bool)arg1;
- (id)_sortedStatuses:(id)arg1;
- (void)_updateMyStatusesWithPeopleProvider:(id)arg1;
- (void)_updateStatusesWithPeopleProvider:(id)arg1;
- (void)addStatusFetchingListener:(id)arg1;
- (id)allMyStatuses;
- (id)allStatuses;
- (id)announcer;
- (void)deleteMyStatus:(id)arg1;
- (id)filteredStatusesForMapPersonLocationsProvider:(id)arg1;
- (id)firstUnviewedCallout;
- (_Bool)hasLoadedMyStatusesAtLeastOnce;
- (_Bool)hasLoadedStatusesAtLeastOnce;
- (_Bool)hasUnviewedMyStatuses;
- (id)initWithCurrentUserId:(id)arg1 locationSharingPreferences:(id)arg2 mapBitmojiAvatarGenerator:(id)arg3 mapExploreService:(id)arg4 mapPeopleFriendsProvider:(id)arg5 mapUserPreferences:(id)arg6 userInfoProvider:(id)arg7;
@property(getter=isLoadingMyStatuses) _Bool loadingMyStatuses; // @synthesize loadingMyStatuses=_loadingMyStatuses;
@property(getter=isLoadingStatuses) _Bool loadingStatuses; // @synthesize loadingStatuses=_loadingStatuses;
- (_Bool)isStatusViewed:(id)arg1;
- (_Bool)isViewedStatusId:(id)arg1;
@property(retain) NSDate *lastSuccessfulMyStatusesLoadDate; // @synthesize lastSuccessfulMyStatusesLoadDate=_lastSuccessfulMyStatusesLoadDate;
@property(retain) NSDate *lastSuccessfulStatusesLoadDate; // @synthesize lastSuccessfulStatusesLoadDate=_lastSuccessfulStatusesLoadDate;
- (void)locationSharingPreferencesUpdated:(id)arg1;
- (id)mapPersonStatusForUserId:(id)arg1;
- (void)markStatusViewed:(id)arg1;
- (void)markViewedStatusId:(id)arg1 userId:(id)arg2;
- (double)mostRecentUnviewedUpdateTimestamp;
@property(retain) NSOrderedSet *myStatuses; // @synthesize myStatuses=_myStatuses;
- (unsigned long long)numberOfUnviewedStatuses:(id)arg1;
- (void)peopleFriendsProviderDidUpdate:(id)arg1;
@property(readonly, nonatomic) SCMapExploreStatus *preferredInitialStatus;
- (void)reload;
- (void)reloadIfOlderThan:(double)arg1;
- (void)reloadMyStatuses;
- (void)reloadMyStatusesIfOlderThan:(double)arg1;
- (void)reloadStatuses;
- (void)reloadStatusesIfOlderThan:(double)arg1;
- (void)removeRequestedUpdatesForStatusFetchingListener:(id)arg1;
- (void)removeStatusFetchingListener:(id)arg1;
- (void)requestPeriodicUpdatesForStatusFetchingListener:(id)arg1;
@property(retain) NSOrderedSet *statuses; // @synthesize statuses=_statuses;
@property(retain) NSDictionary *statusesByStatusId; // @synthesize statusesByStatusId=_statusesByStatusId;
@property(retain) NSDictionary *statusesByUserId; // @synthesize statusesByUserId=_statusesByUserId;
- (id)statusForUserId:(id)arg1;
- (void)updateServerWithViewedStatuses;
- (void)warmup;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

